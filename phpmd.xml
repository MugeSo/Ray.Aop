<?xml version="1.0" encoding="UTF-8"?>
<!-- codesize.xml -->
<ruleset xmlns="http://pmd.sf.net/ruleset/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Code Size Rules" xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd" xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">
    <description>
The Code Size Ruleset contains a collection of rules that find code size related problems.
    </description>
    <rule name="CyclomaticComplexity" since="0.1" message="The {0} {1}() has a Cyclomatic Complexity of {2}." class="PHP_PMD_Rule_CyclomaticComplexity" externalInfoUrl="http://phpmd.org/rules/codesize.html#cyclomaticcomplexity">
        <description><![CDATA[
Complexity is determined by the number of decision points in a method plus one for the
method entry. The decision points are 'if', 'while', 'for', and 'case labels'. Generally,
1-4 is low complexity, 5-7 indicates moderate complexity, 8-10 is high complexity,
and 11+ is very high complexity.
]]></description>
        <priority>3</priority>
        <properties>
            <property name="reportLevel" description="The Cyclomatic Complexity reporting threshold" value="10"/>
            <property name="showClassesComplexity" description="Indicate if class average violation should be added to the report" value="true"/>
            <property name="showMethodsComplexity" description="Indicate if class average violation should be added to the report" value="true"/>
        </properties>
    </rule>
    <rule name="NPathComplexity" since="0.1" message="The {0} {1}() has an NPath complexity of {2}." class="PHP_PMD_Rule_Design_NpathComplexity" externalInfoUrl="http://phpmd.org/rules/codesize.html#npathcomplexity">
        <description>

The NPath complexity of a method is the number of acyclic execution paths through that method.
A threshold of 200 is generally considered the point where measures should be taken to reduce complexity.


        </description>
        <priority>3</priority>
        <properties>
            <property name="minimum" description="The npath reporting threshold" value="200"/>
        </properties>
    </rule>
    <rule name="ExcessiveMethodLength" since="0.1" message="The {0} {1}() has {2} lines of code. Avoid really long methods." class="PHP_PMD_Rule_Design_LongMethod" externalInfoUrl="http://phpmd.org/rules/codesize.html#excessivemethodlength">
        <description>
Violations of this rule usually indicate that the method is doing
too much. Try to reduce the method size by creating helper methods and removing any copy/pasted code.
        </description>
        <priority>3</priority>
        <properties>
            <property name="minimum" description="The method size reporting threshold" value="100"/>
        </properties>
    </rule>
    <rule name="ExcessiveClassLength" since="0.1" message="The {0} {1} has {2} lines of code. Avoid really long classes." class="PHP_PMD_Rule_Design_LongClass" externalInfoUrl="http://phpmd.org/rules/codesize.html#excessiveclasslength">
        <description>
Long Class files are indications that the class may be trying to
do too much. Try to break it down, and reduce the size to something
manageable.
        </description>
        <priority>3</priority>
        <properties>
            <property name="minimum" description="The class size reporting threshold" value="1000"/>
        </properties>
    </rule>
    <rule name="ExcessiveParameterList" since="0.1" message="The {0} {1} has {2} parameters. Consider to reduce parameter number under {3}." class="PHP_PMD_Rule_Design_LongParameterList" externalInfoUrl="http://phpmd.org/rules/codesize.html#excessiveparameterlist">
        <description>
Long parameter lists can indicate that a new object should be created to
wrap the numerous parameters. Basically, try to group the parameters together.
        </description>
        <priority>3</priority>
        <properties>
            <property name="minimum" description="The parameter count reporting threshold" value="10"/>
        </properties>
    </rule>
    <rule name="ExcessivePublicCount" since="0.1" message="The {0] {1} has {2} public methods and attributes. Consider to reduce the number of public items under {3}." class="PHP_PMD_Rule_ExcessivePublicCount" externalInfoUrl="http://phpmd.org/rules/codesize.html#excessivepubliccount">
        <description>
A large number of public methods and attributes declared in a class can indicate
the class may need to be broken up as increased effort will be required to
thoroughly test it.
        </description>
        <priority>3</priority>
        <properties>
            <property name="minimum" description="The public item reporting threshold" value="45"/>
        </properties>
    </rule>
    <rule name="TooManyFields" since="0.1" message="The {0] {1] has {2} fields. Consider to redesign {1} to keep the number of fields under {3}." class="PHP_PMD_Rule_Design_TooManyFields" externalInfoUrl="http://phpmd.org/rules/codesize.html#toomanyfields">
        <priority>3</priority>
        <properties>
            <property name="maxfields" description="The field count reporting threshold " value="15"/>
        </properties>
    </rule>

    <rule name="TooManyMethods" since="0.1" class="PHP_PMD_Rule_Design_TooManyMethods" message="The {0] {1} has {2} methods. Consider refactoring {1} to keep number of methods under {3}." externalInfoUrl="http://phpmd.org/rules/codesize.html#toomanymethods">
        <description><![CDATA[
A class with too many methods is probably a good suspect for refactoring, in
order to reduce its complexity and find a way to have more fine grained objects.
]]></description>
        <priority>3</priority>
        <properties>
            <property name="maxmethods" description="The method count reporting threshold " value="10"/>
        </properties>
    </rule>
    <rule name="ExcessiveClassComplexity" since="0.2.5" class="PHP_PMD_Rule_Design_WeightedMethodCount" message="The class {0} has an overall complexity of {1} which is very high. The configured complexity threshold is {2}." externalInfoUrl="http://phpmd.org/rules/codesize.html#excessiveclasscomplexity">
        <description><![CDATA[
The WMC of a class is a good indicator of how much time and effort is required
to modify and maintain this class. A large number of methods also means that
this class has a greater potential impact on derived classes.
]]></description>
        <priority>3</priority>
        <properties>
            <property name="maximum" description="The maximum WMC tolerable for a class." value="50"/>
        </properties>
    </rule>
    <!-- design.xml -->
    <rule name="ExitExpression" since="0.2" message="The {0} {1}() contains an exit expression." class="PHP_PMD_Rule_Design_ExitExpression" externalInfoUrl="http://phpmd.org/rules/design.html#exitexpression">
        <description><![CDATA[
An exit-expression within regular code is untestable and therefore it should
be avoided. Consider to move the exit-expression into some kind of startup
script where an error/exception code is returned to the calling environment.
]]></description>
        <priority>1</priority>
        <properties/>
    </rule>
    <rule name="EvalExpression" since="0.2" message="The {0} {1}() contains an eval expression." class="PHP_PMD_Rule_Design_EvalExpression" externalInfoUrl="http://phpmd.org/rules/design.html#evalexpression">
        <description><![CDATA[
An eval-expression is untestable, a security risk and bad practice. Therefore
it should be avoided. Consider to replace the eval-expression with regular
code.
]]></description>
        <priority>1</priority>
        <properties/>
    </rule>
    <rule name="NumberOfChildren" since="0.2" message="The {0} {1} has {2} children. Consider to rebalance this class hierarchy to keep number of children under {3}." class="PHP_PMD_Rule_Design_NumberOfChildren" externalInfoUrl="http://phpmd.org/rules/design.html#numberofchildren">
        <description><![CDATA[
A class with an excessive number of children is an indicator for an unbalanced
class hierarchy. You should consider to refactor this class hierarchy.
]]></description>
        <priority>2</priority>
        <properties>
            <property name="minimum" value="15" description="Maximum number of acceptable child classes."/>
        </properties>
        <example/>
    </rule>
    <rule name="DepthOfInheritance" since="0.2" message="The {0} {1} has {2} parents. Consider to reduce the depth of this class hierarchy to under {3}." class="PHP_PMD_Rule_Design_DepthOfInheritance" externalInfoUrl="http://phpmd.org/rules/design.html#depthofinheritance">
        <description><![CDATA[
A class with many parents is an indicator for an unbalanced and wrong class
hierarchy. You should consider to refactor this class hierarchy.
]]></description>
        <priority>2</priority>
        <properties>
            <property name="minimum" value="6" description="Maximum number of acceptable parent classes."/>
        </properties>
        <example/>
    </rule>
    <rule name="CouplingBetweenObjects" since="1.1.0" message="The class {0} has a coupling between objects value of {1}. Consider to reduce the number of dependencies under {2}." class="PHP_PMD_Rule_Design_CouplingBetweenObjects" externalInfoUrl="http://phpmd.org/rules/design.html#couplingbetweenobjects">
        <description><![CDATA[
A class with to many dependencies has negative impacts on several quality
aspects of a class. This includes quality criterias like stability,
maintainability and understandability
]]></description>
        <priority>2</priority>
        <properties>
            <property name="minimum" value="13" description="Maximum number of acceptable dependencies."/>
        </properties>
    </rule>
        <rule name="LongVariable" since="0.2" message="Avoid excessively long variable names like {0}. Keep variable name length under {1}." class="PHP_PMD_Rule_Naming_LongVariable" externalInfoUrl="http://phpmd.org/rules/naming.html#longvariable">
        <description>
Detects when a field, formal or local variable is declared with a long name.
        </description>
        <priority>3</priority>
        <properties>
            <property name="maximum" description="The variable length reporting threshold" value="20"/>
        </properties>
    </rule>
    <rule name="ConstantNamingConventions" since="0.2" message="Constant {0} should be defined in uppercase" class="PHP_PMD_Rule_Naming_ConstantNamingConventions" externalInfoUrl="http://phpmd.org/rules/naming.html#constantnamingconventions">
        <description>
Class/Interface constant nanmes should always be defined in uppercase.
        </description>
        <priority>4</priority>
        <properties/>
    </rule>
    <rule name="BooleanGetMethodName" since="0.2" message="The '{0}()' method which returns a boolean should be named 'is...()' or 'has...()'" class="PHP_PMD_Rule_Naming_BooleanGetMethodName" externalInfoUrl="http://phpmd.org/rules/naming.html#booleangetmethodname">
        <description>
Looks for methods named 'getX()' with 'boolean' as the return type. The convention
is to name these methods 'isX()' or 'hasX()'.
        </description>
        <priority>4</priority>
        <properties>
            <property name="checkParameterizedMethods" value="false" description="Applies only to methods without parameter when set to true"/>
        </properties>
    </rule>

    <!-- unusedcode.xml -->
    <rule name="UnusedPrivateField" since="0.2" message="Avoid unused private fields such as '{0}'." class="PHP_PMD_Rule_UnusedPrivateField" externalInfoUrl="http://phpmd.org/rules/unusedcode.html#unusedprivatefield">
        <description>
Detects when a private field is declared and/or assigned a value, but not used.
        </description>
        <priority>3</priority>
    </rule>
    <rule name="UnusedLocalVariable" since="0.2" message="Avoid unused local variables such as '{0}'." class="PHP_PMD_Rule_UnusedLocalVariable" externalInfoUrl="http://phpmd.org/rules/unusedcode.html#unusedlocalvariable">
        <description>
Detects when a local variable is declared and/or assigned, but not used.
        </description>
        <priority>3</priority>
    </rule>
    <rule name="UnusedPrivateMethod" since="0.2" message="Avoid unused private methods such as '{0}'." class="PHP_PMD_Rule_UnusedPrivateMethod" externalInfoUrl="http://phpmd.org/rules/unusedcode.html#unusedprivatemethod">
        <description>
Unused Private Method detects when a private method is declared but is unused.
        </description>
        <priority>3</priority>
    </rule>
    <rule name="UnusedFormalParameter" since="0.2" message="Avoid unused parameters such as '{0}'." class="PHP_PMD_Rule_UnusedFormalParameter" externalInfoUrl="http://phpmd.org/rules/unusedcode.html#unusedformalparameter">
        <description>
Avoid passing parameters to methods or constructors and then not using those parameters.
        </description>
        <priority>3</priority>
    </rule>
</ruleset>
